services:
  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rails-elk-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - rails-elk

  rails:
    image: rails-elk:1.3
    ports:
      - "3000:3000"
    environment:
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy # Garante que o Rails só inicie após o PostgreSQL estar saudável
    volumes:
      - rails-elk-log:/rails/log

    networks:
      - rails-elk

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Define a senha do superusuário 'elastic'
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false # Tira a necessidade de SSL
      - cluster.name=${CLUSTER_NAME}
    ports:
      - "9200:9200"
    volumes:
      - rails-elk-elasticsearch-data:/usr/share/elasticsearch/data # Volume para persistir os dados do Elasticsearch
    networks:
      - rails-elk
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health | grep -vq ''"status":"red"''',
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  # Serviço do Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy # Garante que o Logstash só inicie após o Elasticsearch estar saudável
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline/ # Mapeia nosso arquivo de pipeline
      - rails-elk-log:/var/log/rails:ro
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Passa a senha para o logstash.conf
    networks:
      - rails-elk

  # Serviço do Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    depends_on:
      elasticsearch:
        condition: service_healthy # Garante que o Kibana só inicie após o Elasticsearch estar saudável
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system # Usuário que o Kibana usará para se conectar (Se usar o usuário root elastic da erro :<)
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD} # Senha para o Kibana se conectar
    ports:
      - "5601:5601"
    networks:
      - rails-elk
  nginx:
    image: nginx:1.27.5-alpine # Usando uma imagem leve
    ports:
      # Expõe a porta 80 do Nginx para o host. Esta é a ÚNICA porta que o usuário acessa.
      - "8081:80"
    volumes:
      # Monta nosso arquivo de configuração
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - rails
    networks:
      - rails-elk
networks:
  rails-elk:
    driver: bridge

volumes:
  rails-elk-postgres-data:
  rails-elk-elasticsearch-data:
  rails-elk-log:

